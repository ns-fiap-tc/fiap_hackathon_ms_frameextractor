app.version=@project.version@
# timestamp of the package
app.build.timestamp=@maven.build.timestamp@

server.port=8080
spring.application.name=@project.artifactId@
spring.application.description=@project.description@

file.processing.executor.threads=20
# intervalo em que os frames serao obtidos
file.processing.frame.interval=7

# RabbitMQ
spring.rabbitmq.exchange=app
spring.rabbitmq.host=${MESSAGE_QUEUE_HOST}
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
rabbitmq.queue.consumer.messageQueue=frame-extractor
rabbitmq.queue.producer.messageQueue=uploadS3


# Swagger
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

logging.level.root=INFO
# Habilita logs de debug para OTLP (remover após confirmar funcionamento)
logging.level.io.micrometer.registry.otlp=DEBUG

aws.region=${AWS_REGION}
aws.s3.bucket-name=${AWS_S3_BUCKET_NAME}


# --- Management / Actuator ---
management.endpoints.web.exposure.include=prometheus,health,metrics
management.endpoint.prometheus.enabled=true

# --- Metrics Configuration ---
management.metrics.distribution.percentiles-histograms=true
management.metrics.distribution.minimum-expected-value.http.server.requests=1ms
management.metrics.distribution.maximum-expected-value.http.server.requests=30s

# --- OTLP Export Configuration ---
# As configurações de endpoint, protocol e enabled vêm das variáveis de ambiente do Kubernetes
# MANAGEMENT_METRICS_EXPORT_OTLP_ENDPOINT=http://otel-collector.observability.svc.cluster.local:4318/v1/metrics
# MANAGEMENT_METRICS_EXPORT_OTLP_PROTOCOL=http/protobuf
# MANAGEMENT_METRICS_EXPORT_OTLP_ENABLED=true

# Intervalo de publicação das métricas (padrão é 1m, definimos 30s para feedback mais rápido)
management.metrics.export.otlp.step=30s

# --- Actuator Configuration ---
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true

# --- Tags ---
management.metrics.tags.application=frameextractor-service
management.metrics.tags.service=ms-frameextractor

# Feign Clients
spring.cloud.openfeign.client.config.notificacao-service-client.url=http://${NOTIFICACAO_SERVICE_CLIENT}/notificacao-service/v1