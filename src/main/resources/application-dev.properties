app.version=@project.version@
# timestamp of the package
app.build.timestamp=@maven.build.timestamp@

server.port=8084
spring.application.name=@project.artifactId@
spring.application.description=@project.description@

file.processing.executor.threads=20
# intervalo em que os frames serao obtidos
file.processing.frame.interval=7

# RabbitMQ

spring.rabbitmq.exchange=app
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
rabbitmq.queue.consumer.messageQueue=frame-extractor
rabbitmq.queue.producer.messageQueue=uploadS3


# Swagger
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

logging.level.root=INFO

aws.region=${AWS_REGION}
aws.s3.bucket-name=${AWS_S3_BUCKET_NAME}


# --- Actuator / Prometheus ---
#management.endpoints.web.exposure.include=health,metrics,prometheus
#management.endpoint.prometheus.enabled=true
# Now /actuator/metrics and /actuator/prometheus work locally

# --- Prometheus (Actuator endpoint) ---
# Available at http://localhost:8084/actuator/prometheus

# --- OpenTelemetry OTLP Export ---
management.otlp.tracing.endpoint=http://localhost:4318/v1/traces
management.otlp.metrics.export.url=http://localhost:4318/v1/metrics
#management.otlp.metrics.export.url=http://host.docker.internal:4318/v1/metrics

management.otlp.metrics.export.step=5s
management.tracing.sampling.probability=1

# Optional: attach service name to telemetry
management.opentelemetry.resource-attributes."service.name"=${spring.application.name}